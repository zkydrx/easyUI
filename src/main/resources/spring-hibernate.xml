<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置数据源 c3p0 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>


        <!-- 请求超时时间 -->
        <property name="checkoutTimeout" value="30000"/>

        <!-- 每60秒检查所有连接池中的空闲连接。默认值：0，不检查 -->
        <property name="idleConnectionTestPeriod" value="30"/>

        <!-- 连接数据库连接池最大空闲时间 -->
        <property name="maxIdleTime" value="30"/>

        <!-- 连接池初始化连接数 -->
        <property name="initialPoolSize" value="50"/>
        <property name="minPoolSize" value="20"/>
        <property name="maxPoolSize" value="100"/>

        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值:3 -->
        <property name="acquireIncrement" value="10"/>
    </bean>


    <!-- 缓存配置 -->
    <!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
    <ehcache:annotation-driven  />
    <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
    <!-- <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches"> <set> <bean name="myCache" class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"/>
        </set> </property> </bean> -->
    <!-- 若只想使用Spring自身提供的缓存器,则注释掉下面的两个关于Ehcache配置的bean,并启用上面的SimpleCacheManager即可 -->
    <!-- Spring提供的基于的Ehcache实现的缓存管理器
    org.springframework.cache.ehcache.EhCacheManagerFactoryBean-->

    <bean id="cacheManager" class="org.springframework.cache.interceptor.CacheProxyFactoryBean">
        <property name="configLocation" ref="cacheManagerFactory" />
    </bean>



    <!--<bean id="cacheManager" class="org.springframework.">-->
        <!--<property name="configLocation">-->
            <!--<value>classpath:ehcache.xml</value>-->
        <!--</property>-->
        <!--&lt;!&ndash; 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 &ndash;&gt;-->
        <!--<property name="shared" value="true"/>-->
    <!--</bean>-->

    <!-- 配置hibernate的sessionFactory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 注入数据源，相关信息看源码 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 扫描hibernate注解配置的entity -->
        <property name="packagesToScan" value="com.tyd.entity"/>
        <!-- hibernate配置信息 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

                <!-- 开启二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <!-- 启用查询缓存 -->
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <!-- 配置二级缓存提供商 org.hibernate.cache.ehcache.EhCacheRegionFactory-->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <!-- 加载缓存所需配置文件 hibernate.net.sf.ehcache.configurationResourceName-->
                <!--<prop key="hibernate.cache.provider_configuration_file_resource_path">classpath:ehcache.xml</prop>-->
            </props>
        </property>


    </bean>



    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- 配置事务增强处理bean，指定事务管理器 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <!-- 配置详细事务处理语义 -->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>

            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" propagation="SUPPORTS" read-only="true"/>

            <!-- 其他采用默认事务方式 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- Spring aop 事务管理 -->
    <aop:config>

        <!-- 配置切入点 -->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.tyd.service..*Impl.*(..))"/>
        <!-- 指定在txAdvice切入点应用txAdvice事务增强处理 -->
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>

    </aop:config>

</beans>